//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SCROLL_CONSTANT_BUFFER
// {
//
//   float2 scroll_directionX;          // Offset:    0 Size:     8
//   float2 scroll_directionY;          // Offset:    8 Size:     8
//
// }
//
// cbuffer TIMER_CONSTANT_BUFFER
// {
//
//   float4 parameters;                 // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// color_sampler_state               sampler      NA          NA             s0      1 
// color_map                         texture  float4          2d             t0      1 
// mask_texture                      texture  float4          2d             t1      1 
// mask_texture2                     texture  float4          2d             t2      1 
// mask_texture3                     texture  float4          2d             t3      1 
// mask_texture4                     texture  float4          2d             t4      1 
// SCROLL_CONSTANT_BUFFER            cbuffer      NA          NA            cb1      1 
// TIMER_CONSTANT_BUFFER             cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.color.x; v1.y <- pin.color.y; v1.z <- pin.color.z; v1.w <- pin.color.w; 
//   v2.x <- pin.texcoord.x; v2.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 12 "C:\Users\2220175\Documents\College\Engine2DGame\flameFont_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.xyzw, r0.wxyz, v1.wxyz  // r0.x <- color.w; r0.y <- color.x; r0.z <- color.y; r0.w <- color.z

#line 14
mul r1.xy, cb1[0].zwzz, cb2[0].xxxx
add r1.xy, r1.xyxx, v2.xyxx
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t1.xyzw, s0
mov r1.x, r1.x  // r1.x <- mask_value

#line 15
itof r1.yz, l(0, 2, 2, 0)
mul r1.yz, r1.yyzy, cb1[0].zzwz
mul r1.yz, r1.yyzy, cb2[0].xxxx
add r1.yz, r1.yyzy, v2.xxyx
sample_indexable(texture2d)(float,float,float,float) r1.y, r1.yzyy, t2.yxzw, s0
mov r1.y, r1.y  // r1.y <- mask_value2

#line 16
mul r1.zw, cb1[0].xxxy, l(0.000000, 0.000000, 0.300000, 0.300000)
add r1.zw, r1.zzzw, v2.xxxy
mul r2.xy, cb1[0].zwzz, l(0.300000, 0.300000, 0.000000, 0.000000)
mov r2.xy, -r2.xyxx
add r1.zw, r1.zzzw, r2.xxxy
sample_indexable(texture2d)(float,float,float,float) r1.z, r1.zwzz, t3.yzxw, s0
mul r2.xy, cb1[0].xyxx, l(0.300000, 0.300000, 0.000000, 0.000000)
mov r2.xy, -r2.xyxx
add r2.xy, r2.xyxx, v2.xyxx
mul r2.zw, cb1[0].zzzw, l(0.000000, 0.000000, 0.300000, 0.300000)
mov r2.zw, -r2.zzzw
add r2.xy, r2.zwzz, r2.xyxx
sample_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t3.yzwx, s0
add r1.z, r1.w, r1.z  // r1.z <- mask_value3

#line 17
sample_indexable(texture2d)(float,float,float,float) r1.w, v2.xyxx, t4.yzwx, s0
mov r1.w, r1.w  // r1.w <- mask_value4

#line 19
mul r1.x, r1.y, r1.x
mul r1.x, r1.z, r1.x
add r1.x, r1.w, r1.x  // r1.x <- mask_result

#line 21
ge r1.y, r1.x, l(0.200000)
movc r1.y, r1.y, l(1.000000), l(0)  // r1.y <- yellow

#line 22
ge r1.z, r1.x, l(0.100000)
movc r1.z, r1.z, l(1.000000), l(0)  // r1.z <- orange

#line 23
ge r1.x, r1.x, l(0.050000)
movc r1.x, r1.x, l(1.000000), l(0)  // r1.x <- red

#line 42
itof r1.w, l(1)
mul r1.w, r1.w, r1.z
add r1.w, r1.w, r1.y
mul r0.y, r0.y, r1.w

#line 43
mul r0.z, r0.z, r1.y

#line 44
itof r1.w, l(1)
mul r1.z, r1.w, r1.z
add r1.y, r1.z, r1.y
itof r1.z, l(1)
mul r1.x, r1.z, r1.x
add r1.x, r1.x, r1.y
mul r0.w, r0.w, r1.x

#line 47
itof r1.x, l(0)
eq r1.x, r0.w, r1.x
if_nz r1.x

#line 49
  itof r0.x, l(0)

#line 50
endif 

#line 52
mov o0.x, r0.y
mov o0.y, r0.z
mov o0.z, r0.w
mov o0.w, r0.x
ret 
// Approximately 59 instruction slots used
